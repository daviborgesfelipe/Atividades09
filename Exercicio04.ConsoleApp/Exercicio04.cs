namespace Exercicio05.ConsoleApp
{
    internal class Exercicio04
    {
        /*
        Faça um programa que encontre o conjunto de 5 dígitos consecutivos na sequência abaixo
        que gere o maior produto:

           [73167]176531330624919225119674426574742355349194934
            96983520312774506326239578318016984801869478851843
            85861560789112949495459501737958331952853208805511
            12540698747158523863050715693290963295227443043557
            66896648950445244523161731856403098711121722383113
            62229893423380308135336276614282806444486645238749
            30358907296290491560440772390713810515859307960866
            70172427121883998797908792274921901699720888093776
            65727333001053367881220235421809751254540594752243
            52584907711670556013604839586446706324415722155397
            53697817977846174064955149290862569321978468622482
            83972241375657056057490261407972968652414535100474
            82166370484403199890008895243450658541227588666881
            16427171479924442928230863465674813919123162824586
            17866458359124566529476545682848912883142607690042
            32421902267105562632111110937054421750694165896040
            07198403850962455444362981230987879927244284909188
            84580156166097919133875499200524063689912560717606
            05886116467109405077541002256983155200055935729725
            71636269561882670428252483600823257530420752963450

            Primeiro conjunto de 5 dígitos consecutivos: 73167
            7*3=21
            21*1=21
            21*6=126
            126*7=882
         */
        static void Main(string[] args)
        {
            Console.Clear();
            #region string sequencia
            string sequencia = 
                "73167" +
                "17653" +
                "13306" +
                "24919" +
                "22511" +
                "96744" +
                "26574" +
                "74235" +
                "53491" +
                "94934" +
                "96983" +
                "52031" +
                "27745" +
                "06326" +
                "23957" +
                "83180" +
                "16984" +
                "80186" +
                "94788" +
                "51843" +
                "85861" +
                "56078" +
                "91129" +
                "49495" +
                "45950" +
                "17379" +
                "58331" +
                "95285" +
                "32088" +
                "05511" +
                "12540" +
                "69874" +
                "71585" +
                "23863" +
                "05071" +
                "56932" +
                "90963" +
                "29522" +
                "74430" +
                "43557" +
                "66896" +
                "64895" +
                "04452" +
                "44523" +
                "16173" +
                "18564" +
                "03098" +
                "71112" +
                "17223" +
                "83113" +
                "62229" +
                "89342" +
                "33803" +
                "08135" +
                "33627" +
                "66142" +
                "82806" +
                "44448" +
                "66452" +
                "38749" +
                "30358" +
                "90729" +
                "62904" +
                "91560" +
                "44077" +
                "23907" +
                "13810" +
                "51585" +
                "93079" +
                "60866" +
                "70172" +
                "42712" +
                "18839" +
                "98797" +
                "90879" +
                "22749" +
                "21901" +
                "69972" +
                "08880" +
                "93776" +
                "65727" +
                "33300" +
                "10533" +
                "67881" +
                "22023" +
                "54218" +
                "09751" +
                "25454" +
                "05947" +
                "52243" +
                "52584" +
                "90771" +
                "16705" +
                "56013" +
                "60483" +
                "95864" +
                "46706" +
                "32441" +
                "57221" +
                "55397" +
                "53697" +
                "81797" +
                "78461" +
                "74064" +
                "95514" +
                "92908" +
                "62569" +
                "32197" +
                "84686" +
                "22482" +
                "83972" +
                "24137" +
                "56570" +
                "56057" +
                "49026" +
                "14079" +
                "72968" +
                "65241" +
                "45351" +
                "00474" +
                "82166" +
                "37048" +
                "44031" +
                "99890" +
                "00889" +
                "52434" +
                "50658" +
                "54122" +
                "75886" +
                "66881" +
                "16427" +
                "17147" +
                "99244" +
                "42928" +
                "23086" +
                "34656" +
                "74813" +
                "91912" +
                "31628" +
                "24586" +
                "17866" +
                "45835" +
                "91245" +
                "66529" +
                "47654" +
                "56828" +
                "48912" +
                "88314" +
                "26076" +
                "90042" +
                "32421" +
                "90226" +
                "71055" +
                "62632" +
                "11111" +
                "09370" +
                "54421" +
                "75069" +
                "41658" +
                "96040" +
                "07198" +
                "40385" +
                "09624" +
                "55444" +
                "36298" +
                "12309" +
                "87879" +
                "92724" +
                "42849" +
                "09188" +
                "84580" +
                "15616" +
                "60979" +
                "19133" +
                "87549" +
                "92005" +
                "24063" +
                "68991" +
                "25607" +
                "17606" +
                "05886" +
                "11646" +
                "71094" +
                "05077" +
                "54100" +
                "22569" +
                "83155" +
                "20005" +
                "59357" +
                "29725" +
                "71636" +
                "26956" +
                "18826" +
                "70428" +
                "25248" +
                "36008" +
                "23257" +
                "53042" +
                "07529" +
                "63450";
            #endregion
            int maiorProduto = 0;
            for (int indicePrimeiroFor = 0; indicePrimeiroFor < sequencia.Length; indicePrimeiroFor+=5)
            {
                string conjuntoString = sequencia.Substring(indicePrimeiroFor, 5);
                Console.WriteLine($"conjunto da vez: {conjuntoString}");
                int resultadoMultiplicacao = 1;
                for (int indiceSegundoFor = 0; indiceSegundoFor < conjuntoString.Length; indiceSegundoFor++)
                {
                    int conjuntoDoLaco = Convert.ToInt32(conjuntoString);
                    string numeroDoLaco = Convert.ToString(conjuntoString[indiceSegundoFor]);
                    int numeroConvertido = Convert.ToInt32(numeroDoLaco);
                    Console.WriteLine($"Maior produto por enquanto: {maiorProduto}");
                    Console.WriteLine($"Conjundo do laço {conjuntoDoLaco}");
                    Console.WriteLine($"Numero do LACO {numeroDoLaco}");
                    Console.WriteLine($"{resultadoMultiplicacao} x {numeroConvertido}");
                    resultadoMultiplicacao *= numeroConvertido;
                    Console.WriteLine($"Resultado {resultadoMultiplicacao}");
                    if (resultadoMultiplicacao > maiorProduto)
                    {
                        maiorProduto = resultadoMultiplicacao;
                        Console.WriteLine($"Maior produto agora é: {maiorProduto}");
                    }
                }
                Console.WriteLine();
                //indicePrimeiroFor += 4;
            }
            Console.WriteLine();
            Console.WriteLine($"Maior produto final: {maiorProduto}");

            Console.ReadLine();
        }
    }
}